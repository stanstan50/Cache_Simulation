<html>
<head>
	<title>Cache Simulator</title>
	<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>
	<script src="main.js"></script>
	<script>
		/*get necessary num of bits required to represent a decimal*/
		function getReqBits(n) {
			if (n === 0) return 1; 
			return Math.floor(Math.log2(n)) + 1;
		}

		function inputCheck(){
			let bs = Number(document.getElementsByName("blocksize")[0].value);
			let ss = Number(document.getElementsByName("setsize")[0].value);
			let mms = Number(document.getElementsByName("mmsize")[0].value);
			let cms = Number(document.getElementsByName("cachesize")[0].value);
			let pf = document.getElementsByName("progflow")[0].value;
			let cachetype = document.getElementsByName("cachetype")[0].value;
			let mmtype = document.getElementsByName("mmtype")[0].value;
			let pftype = document.getElementsByName("progflowtype")[0].value;

			let MMSizeWords = mms;	/*convert to bits*/
			if(mmtype == "blocks"){
				MMSizeWords = bs * mms;
			}
			let MMbits = getMMBitsWords(MMSizeWords);

			let CMSizeWords = cms;
			if (cachetype == "blocks"){
				CMSizeWords = bs * cms;
			}
			let CMbits = getMMBitsWords(CMSizeWords);

			let pfArray = parseProgramFlow(pf); /*prog flow cant be greater than max MMsize*/
			for (let i = 0; i < pfArray.length; i++){
				if (pftype == "words" && getReqBits(hexadeciToDeci(pfArray[i])) > MMbits){
					alert("Each address in program flow cannot be greater than Main Memory Size");
					return;
				} 
				if (pftype == "blocks" && pfArray[i] >= MMSizeWords/bs ){
					alert("Each block in program flow cannot be greater than Main Memory Size");
					return;
				} 
			}

			if (Math.log2(bs) % 1 != 0) { /*powers of 2*/
				alert("Block Size must be a power of 2.");
			} else if (Math.log2(ss) % 1 != 0) {
				alert("Set Size must be a power of 2.");
			} else if (Math.log2(mms) % 1 != 0) {
				alert("Main Memory Size must be a power of 2.");
			} else if (Math.log2(cms) % 1 != 0) { 
				alert("Cache Memory Size must be a power of 2.");				
			} else if (cachetype == "blocks" && cms % ss != 0) { /*cache memory size (blocks) % set size = 0*/
				alert("Cache Memory Size must be divisible by set size.");				
			} else if (cachetype == "words" && cms % bs != 0) { /*cache memory size (words) % block size = 0*/
				alert("Cache Memory Size must be divisible by block size.");				
			} else if (MMbits < CMbits) { /*MM memory size >= cache memory size */
				alert("Main Memory Size should be greater or equal to Cache Memory Size.");				
			} else {
				simulate();
			}
		}

	</script>
	<link rel="stylesheet" type="text/css" href="layout.css">
</head>
<body>
	<div class="body-parent">
	<div class="left-side">
		<div class="header-icon">
			<img src="cachew.png" alt="icon">
		</div>
		<div class="header-title">
			<h1>CACHE SIMULATOR</h1>
			<h2>Block Set Associative, Least Recently Used</h2>
			<hr>
		</div>
		<div class="input-area">
			<div class="input-field cachetime">
				<label>Cache Access Time</label>
				<input type="number" name="cacheAccessTime" min="1" value="1"/>
			</div>
			<div class="input-field mmtime">
				<label>Main Memory Access Time</label>
				<input type="number" name="mmAccessTime" min="1" value="10"/>
			</div>
			<div class="input-field block">
				<label>Block Size</label>
				<input type="number" name="blocksize" min="1"/>
			</div>
			<div class="input-field set">
				<label>Set Size</label>
				<input type="number" name="setsize" min="1"/>
			</div>
			<div class="input-field mm">
				<label>MM Memory Size</label>
				<input type="number" name="mmsize" min="1"/>
				<select name="mmtype">
					<option value="blocks">Blocks</option>
					<option value="words">Words</option>
				</select>
			</div>
			<div class="input-field cm">
				<label>Cache Memory Size</label>
				<input type="number" name="cachesize" min="0"/>
				<select name="cachetype">
					<option value="blocks">Blocks</option>
					<option value="words">Words</option>
				</select>
			</div>
			<div class="input-field progflow">
				<label>Program Flow</label>
				<input type="text" name="progflow"/>
				<select name="progflowtype">
					<option value="blocks">Blocks</option>
					<option value="words">Words</option>
				</select>
			</div>	
		</div>
		<div class="submitinput">
			<input type="submit" value="Simulate" onclick="inputCheck()"/>
		</div>
		<hr>
		<div class="simulresults">
			<div class="simulresults-header">
				<h1>SIMULATION RESULTS</h1>
			</div>
			<div class="simulresults-field">
				<p>
				Number of Cache Hits: <br>
				Number of Cache Miss: <br>
				Miss Penalty: <br>
				Average Memory Access Time: <br>
				Total Memory Access Time: <br>
				</p>
				
			</div>
			<div class="submitexport" style="display:none" id="exportres">
				<input type="submit" value="Export As Text File" onclick="exportResults()"/>
			</div>
		</div>
	</div>
	<div class="right-side">
		<table>
			<tr>
				<th rowspan="2">Set</th>
				<th colspan="2">Block</th>
				<th rowspan="2">Data</th>
			</tr>
			<tr>
				<th class="tagcol">Tag</th>
				<th>Block</th>
			</tr>
			<!-- <tr>
				<td rowspan="2">0</td>
				<td>1</td>
				<td></td>
			</tr>
			<tr>
				<td>2</td>
				<td></td>
			</tr>
			<tr>
				<td rowspan="2">1</td>
				<td>1</td>
				<td></td>
			</tr>
			<tr>
				<td>2</td>
				<td></td>
			</tr>
		
			<tr>
				<td rowspan="2">2</td>
				<td>1</td>
				<td></td>
			</tr>
			<tr>
				<td>2</td>
				<td></td>
			</tr>
			<tr>
				<td rowspan="2">3</td>
				<td>1</td>
				<td></td>
			</tr>
			<tr>
				<td>2</td>
				<td></td>
			</tr>
			 -->
		</table>
	</div>


</body>
</html>